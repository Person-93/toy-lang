file = inner_attr*:attrs item*:items EOF

inner_attr = delim[attr_inner]<attr_data>
attr = delim[attr]<attr_data>
attr_data = ident attr_data_kind:kind
attr_data_kind = (equals attr_data_value):assign | delim[paren]<attr_data_value,*>:call
attr_data_value = str_lit:str | num_lit:num | attr_data~:nested

item = attr*:attrs vis? item_kind
item_kind = function | struct | enum | trait | type_alias

function = (kw_extern str_lit)?:extern kw_fn ident generic_params? \
           delim[paren]<function_param,*>:params \
           (returns type)?:return_type ((colon expr) | semi):body
function_param = attr*:attrs ident colon type

struct = kw_struct ident generic_params? delim[brace]<struct_body>:fields
struct_body = named_struct | tuple_struct | unit_struct
named_struct = delim[brace]<struct_field*>
struct_field = attr*:attrs vis? ident colon type semi
tuple_struct = delim[brace]<tuple_field,*>
tuple_field = attr*:attrs vis? type
unit_struct = semi

enum = attr*:attrs kw_enum ident generic_params? \
       delim[brace]<(variant semi)*>:variants
variant = attr*:attrs ident struct_body:kind

generic_params = delim[generics]<generic_param,*>
generic_param = const_param | ident
const_param = kw_const ident colon type
generics_args = delim[generics]<type,*>

expr = expr_fragment:primary delim[paren]<expr,*>?:args
expr_fragment = code_block | ident | str_lit | num_lit
code_block = delim[brace]<statement* expr~?>
statement = attr*:attrs expr semi

vis = kw_pub delim[paren]<vis_kind>?
vis_kind = kw_super | kw_package

type = ident | (ampersand type)~:ref

type_alias = kw_type ident generic_params? equals type semi

trait = kw_trait ident generic_params? delim[brace]<trait_item*>:items
trait_item = attr*:attrs trait_item_kind
trait_item_kind = function | associated_type | associated_const
associated_type = kw_type ident (equals type)?:default semi
associated_const = kw_const ident colon type (equals expr)?:default semi
